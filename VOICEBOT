import speech_recognition as sr
import pyttsx3
import openai
import os


openai.api_key = os.environ.get("Your_open_AI_API_key")


engine = pyttsx3.init()

def speak(text):
    engine.say(text)
    engine.runAndWait()

def listen(recognizer, mic):
    with mic as source:
        print("Listening...")
        try:
            audio = recognizer.listen(source, timeout=5, phrase_time_limit=10)
            print("Recognizing...")
            text = recognizer.recognize_google(audio)
            print(f"You said: {text}")
            return text
        except sr.UnknownValueError:
            print("Sorry, I could not understand the audio.")
            speak("Sorry, I could not understand the audio.")
            return None
        except sr.RequestError:
            print("There was an error with the speech recognition service.")
            speak("There was an error with the speech recognition service.")
            return None
        except sr.WaitTimeoutError:
            print("You didn't say anything.")
            speak("You didn't say anything.")
            return None
# Listen with retry
def listen_with_retry(recognizer, mic, max_attempts=3):
    attempts = 0
    while attempts < max_attempts:
        user_input = listen(recognizer, mic)
        if user_input is not None:
            return user_input
        else:
            speak("I didn't catch that. Could you please try again?")
        attempts += 1
    return None

def generate_response(prompt):
    try:
        response = openai.ChatCompletion.create(
            model="gpt-3.5-turbo",
            messages=[{"role": "user", "content": prompt}]
        )
        message = response['choices'][0]['message']['content']
        return message
    except Exception as e:
        print(f"Error generating response: {e}")
        speak("There was an error generating a response.")
        return None

def main():
    recognizer = sr.Recognizer()
    mic = sr.Microphone()

    with mic as source:
        print("Calibrating for ambient noise... please wait.")
        recognizer.adjust_for_ambient_noise(source, duration=1)
        print("Calibration complete.")
    speak("Hello! I am your assistant. How can I help you today?")
    while True:
        # Using the listen_with_retry function to allow retries
        user_input = listen_with_retry(recognizer, mic)
        if user_input:
            if user_input.lower() in ["exit", "quit", "stop", "bye" , "goodbye"]:
                speak("Goodbye!")
                break
            response = generate_response(user_input)
            if response:
                print(f"Assistant: {response}")
                speak(response)


if __name__ == "__main__":
    main()